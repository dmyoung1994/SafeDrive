MojioClient = require '../lib/nodejs/MojioClient'
{{Model}} = require '../lib/models/{{Model}}'
config = require './config/mojio-config.coffee'
mojio_client = new MojioClient(config)
assert = require('assert')
testdata = require('./data/mojio-test-data')
should = require('should')

testObject = null

describe '{{Model}}', ->

    before( (done) ->
        mojio_client.login(testdata.username, testdata.password, (error, result) ->
            (error==null).should.be.true
            done()
        )
    )

    # test {{Model}}
    it 'can get {{Resource}} from Model', (done) ->
        {{model}} = new {{Model}}({})
        {{model}}.authorization(mojio_client)

        {{model}}.get({}, (error, result) ->
            (error==null).should.be.true
            mojio_client.should.be.an.instanceOf(MojioClient)
            result.Objects.should.be.an.instanceOf(Array)
            if (result.Objects? and result.Objects instanceof (Array))
                instance.should.be.an.instanceOf({{Model}}) for instance in result.Objects
                testObject = instance  # save for later reference.
            else
                result.should.be.an.instanceOf({{Model}})
                testObject = result
            done()
        )

    it 'can get {{Resource}}', (done) ->

        mojio_client.get({{Model}}, {}, (error, result) ->
            (error==null).should.be.true
            mojio_client.should.be.an.instanceOf(MojioClient)
            result.Objects.should.be.an.instanceOf(Array)
            instance.should.be.an.instanceOf({{Model}}) for instance in result.Objects
            done()
        )

    it 'can create, find, save, and delete {{Model}}', (done) ->
        {{model}} = new {{Model}}().mock()

        mojio_client.post({{model}}, (error, result) ->
            (error==null).should.be.true
            {{model}} = new {{Model}}(result)

            mojio_client.get({{Model}}, {{model}}.id(), (error, result) ->
                (error==null).should.be.true
                mojio_client.should.be.an.instanceOf(MojioClient)
                result.should.be.an.instanceOf({{Model}})

                mojio_client.put(result, (error, result) ->
                    (error==null).should.be.true
                    result.should.be.an.instanceOf(Object)
                    {{model}} = new {{Model}}(result)

                    mojio_client.delete({{model}}, (error, result) ->
                        (error==null).should.be.true
                        (result.result == "ok").should.be.true
                        done()
                    )
                )
            )
        )

    it 'can create, save, and delete {{Model}} from model', (done) ->
        # todo define entityType as an enum to be used here.
        {{model}} = new {{Model}}().mock()
        {{model}}.authorization(mojio_client)
        {{model}}._id = null;

        {{model}}.post((error, result) ->
            (error==null).should.be.true
            result.should.be.an.instanceOf(Object)
            {{model}} = new {{Model}}(result)
            {{model}}.authorization(mojio_client)

            {{model}}.get({{model}}.id(), (error, result) ->
                result.should.be.an.instanceOf({{Model}})
                {{model}} = new {{Model}}(result)
                {{model}}.authorization(mojio_client)

                {{model}}.put((error, result) ->
                    (error==null).should.be.true
                    result.should.be.an.instanceOf(Object)
                    {{model}} = new {{Model}}(result)
                    {{model}}.authorization(mojio_client)

                    {{model}}.delete((error, result) ->
                        (error==null).should.be.true
                        (result.result == "ok").should.be.true
                        done()
                    )
                )

            )
        )