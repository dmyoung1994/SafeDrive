//# signalr-client
//By: [Matthew Whited](mailto:matt@whited.us?subject=signalr-client)  (c) 2014

// ## Usage

//### Create instance of signalR client

//var signalR = require('signalr-client');
var signalR = require('./signalr.js');
var client  = new signalR.client(
	"http://localhost:8080/signalR",  //signalR service URL
	['TestHub'],                      // array of hubs to be supported in the connection
    10                                //optional: retry timeout in seconds (default: 10)
);

//### Binding callbacks from signalR hub

//#### Method pattern
client.on(
	'TestHub',		// Hub Name (case insensative)
	'addmessage',	// Method Name (case insensative)
	function(name, message) { // Callback function with parameters matching call from hub
		console.log("revc => " + name + ": " + message); 
	});

//#### Direct pattern

//If you bind directly to the hub handlers as show here any previous
//	handlers for that hub will be removed!
client.handlers.testhub = { // hub name must be all lower case.
	addmessage: function(name, message) { // method name must be all lower case, function signature should match call from hub
		console.log("revc => " + name + ": " + message); 
	}
};

//==== Optional function bindings to these names will allow for handling of these system events.

client.serviceHandlers.bound = function() { console.log("Websocket bound"); }
client.serviceHandlers.connectFailed = function(error) { console.log("Websocket connectFailed: ", error); }
client.serviceHandlers.connected = function(connection) { console.log("Websocket connected"); };
client.serviceHandlers.disconnected = function() { console.log("Websocket disconnected"); }
client.serviceHandlers.onerror = function(error) { console.log("Websocket onerror: ", error); }
client.serviceHandlers.messageReceived = function(message) { console.log("Websocket messageReceived: ", message); return false; }

client.serviceHandlers.connectionLost = function(error) {
     console.log("Connection Lost: ", error); 
}
client.serviceHandlers.reconnected = function(connection) { 
    console.log("Websocket connected"); 
};
client.serviceHandlers.reconnecting = function(retry /* { inital: true/false, count: 0} */) {
    console.log("Websocket Retrying: ", retry);
    return retry.count >= 3; /* cancel retry true */
}

//### Calling methods on the signalR hub

//#### From the client instance
//setInterval(function() {
//    client.invoke(
//		'TestHub', // Hub Name (case insensitive)
//		'Send',	// Method Name (case insensitive)
//		'client', 'invoked from client' //additional parameters to match called signature
//		);
//},2000);

//#### From the hub instance
setTimeout(function() {
    (function sendMessage() {
       	var hub = client.hub('TestHub'); // Hub Name (case insensitive)

        // if not bound set the hub will be undefined
        if (!hub) {
            setImmediate(sendMessage);
            return;
        }	
        hub.invoke(
		    'Send',	// Method Name (case insensitive) 
		    'hub', 'invoked from hub' //additional parameters to match called signature
		    );

    })();
},3000);

console.log('Waiting!');
process.stdin.resume();

setTimeout(function() {
    // explicly disconnect
    client.end();
},1500);

/*
setTimeout(function() {
    console.log('Bye!');
    process.exit();
}, 10000);
*/